"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runApp = exports.sum = void 0;

var _lodash = require("lodash");

//  fixme: add pagination, search, count rows
//  todo посмотри что можно сделать с валидацией номера телефона напримера
//  - т.е. получать инфу по кодификатору например.
const sum = (a, b) => a + b;
/* eslint-disable */


exports.sum = sum;
let stackStore = {
  "version": "1.0.0"
};
stackStore.currentPageNumber = 1;
stackStore.pageRowsLimit = 10;

const buildRow = (parentObj, oneRowObjects, tag) => {
  const row = document.createElement('tr');

  _lodash._.reduce(oneRowObjects, (acc, el) => {
    const cell = document.createElement(tag); //console.log(el);

    cell.textContent = el;
    acc.append(cell);
    return acc;
  }, row);

  parentObj.append(row);
  return row;
};

const buildTableHeader = (obj, headers) => {
  const header = buildRow(obj, headers, 'th');
  header.className = 'header';
  return header;
};

const isOdd = num => {
  return num % 2;
};

const addRemoveRowCell = obj => {
  let colRemove = document.createElement('td');
  colRemove.className = 'removeRowBtn';
  let buttonRemove = document.createElement('i');
  buttonRemove.className = "fa fa-remove";
  colRemove.append(buttonRemove);
  obj.append(colRemove);
  return obj;
};

const addRemoveRowHeaderCell = obj => {
  let colRemove = document.createElement('th');
  let buttonRemove = document.createElement('i');
  buttonRemove.className = "fa fa-remove";
  colRemove.append(buttonRemove);
  obj.append(colRemove);
  return obj;
};

const hasRemoveRowColumn = obj => obj.columnDeleteRow;

const selectHandler = e => {
  console.log('event.currentTarget =>', e.currentTarget);
};

const removeHandler = e => {
  //console.log('=> ',e.target.parentElement, '=>> ', e.target.parentNode.parentNode);
  e.currentTarget.parentNode.parentNode.removeChild(e.currentTarget.parentNode); // fixme: add stack for store removed mail-lists
  // fixme: add stack for store final list of rows ( and check it befor send)
  // fixme: add this two stascks to configTable - for store data

  stackStore.count = stackStore.count + 1;
  console.log('stackStore => ', stackStore);
};

const renderDtTable = (obj, configTable, tableData) => {
  //obj.removeChild(obj);
  const tbl = document.createElement('table');
  tbl.className = 'dtTable';
  const header = buildTableHeader(obj, configTable.headers[0]);

  if (hasRemoveRowColumn(configTable)) {
    addRemoveRowHeaderCell(header);
  }

  tbl.append(header);
  let index = 0;

  _lodash._.forEach(tableData, element => {
    const row = buildRow(obj, element, 'td');

    if (hasRemoveRowColumn(configTable)) {
      addRemoveRowCell(row);
    }

    tbl.append(row);
    index += 1;
  });

  obj.append(tbl);
  const rows = document.querySelectorAll('table.dtTable tr');

  _lodash._.forEach(rows, element => {
    element.addEventListener('click', selectHandler);
  });

  const removeRowButtons = document.querySelectorAll('td.removeRowBtn');

  _lodash._.forEach(removeRowButtons, button => {
    button.addEventListener('click', removeHandler);
  });

  return obj;
};
/**
 * application
 * @param obj
 * @param configTable
 * @param testData
 * @returns {*}
 */


const runApp = (obj, configTable, tableData) => {
  /**
   * !!!
   */
  stackStore.inputData = tableData; // fixme - clone or copy obj!!!!  - todo

  if (tableData.rowLimit) {
    stackStore.pageRowsLimit = tableData.rowLimit;
  }

  renderDtTable(obj, configTable, tableData);
  return renderDtTable(obj, configTable, tableData);
};
/* eslint-enable */


exports.runApp = runApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,