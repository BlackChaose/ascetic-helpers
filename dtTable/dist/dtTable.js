"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runApp = exports.sum = void 0;

var _lodash = require("lodash");

const sum = (a, b) => a + b;
/* eslint-disable */


exports.sum = sum;

const buildRow = (parentObj, oneRowObjects, tag) => {
  console.log(typeof parentObj, parentObj);
  console.log(typeof oneRowObjects, oneRowObjects, _lodash._.head(oneRowObjects));
  const row = document.createElement('tr');

  _lodash._.reduce(oneRowObjects, (acc, el) => {
    const cell = document.createElement(tag);
    console.log(el);
    cell.textContent = el;
    acc.append(cell);
    return acc;
  }, row);

  parentObj.append(row);
  return row;
};

const buildTableHeader = (obj, headers) => {
  const header = buildRow(obj, headers, 'th');
  header.className = 'header';
  return header;
};

const isOdd = num => {
  return num % 2;
};

const runApp = (obj, configTable, testData) => {
  const tbl = document.createElement('table');
  tbl.append(buildTableHeader(obj, configTable.headers[0]));
  let index = 0;

  _lodash._.forEach(testData, element => {
    const row = buildRow(obj, element, 'td');
    row.className = isOdd(index) ? 'odd' : 'even';
    tbl.append(row);
    index += 1;
  });

  obj.append(tbl);
  return obj;
};
/* eslint-enable */


exports.runApp = runApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kdFRhYmxlLmpzIl0sIm5hbWVzIjpbInN1bSIsImEiLCJiIiwiYnVpbGRSb3ciLCJwYXJlbnRPYmoiLCJvbmVSb3dPYmplY3RzIiwidGFnIiwiY29uc29sZSIsImxvZyIsIl8iLCJoZWFkIiwicm93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicmVkdWNlIiwiYWNjIiwiZWwiLCJjZWxsIiwidGV4dENvbnRlbnQiLCJhcHBlbmQiLCJidWlsZFRhYmxlSGVhZGVyIiwib2JqIiwiaGVhZGVycyIsImhlYWRlciIsImNsYXNzTmFtZSIsImlzT2RkIiwibnVtIiwicnVuQXBwIiwiY29uZmlnVGFibGUiLCJ0ZXN0RGF0YSIsInRibCIsImluZGV4IiwiZm9yRWFjaCIsImVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFHQSxNQUFNQSxHQUFHLEdBQUcsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsR0FBR0MsQ0FBMUI7QUFDQTs7Ozs7QUFDQSxNQUFNQyxRQUFRLEdBQUcsQ0FBQ0MsU0FBRCxFQUFZQyxhQUFaLEVBQTJCQyxHQUEzQixLQUFtQztBQUNsREMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBT0osU0FBbkIsRUFBK0JBLFNBQS9CO0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQU9ILGFBQW5CLEVBQW1DQSxhQUFuQyxFQUFrREksVUFBRUMsSUFBRixDQUFPTCxhQUFQLENBQWxEO0FBQ0EsUUFBTU0sR0FBRyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBWjs7QUFDQUosWUFBRUssTUFBRixDQUFTVCxhQUFULEVBQXdCLENBQUNVLEdBQUQsRUFBTUMsRUFBTixLQUFhO0FBQ25DLFVBQU1DLElBQUksR0FBR0wsUUFBUSxDQUFDQyxhQUFULENBQXVCUCxHQUF2QixDQUFiO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUSxFQUFaO0FBQ0FDLElBQUFBLElBQUksQ0FBQ0MsV0FBTCxHQUFtQkYsRUFBbkI7QUFDQUQsSUFBQUEsR0FBRyxDQUFDSSxNQUFKLENBQVdGLElBQVg7QUFDQSxXQUFPRixHQUFQO0FBQ0QsR0FORCxFQU1HSixHQU5IOztBQU9BUCxFQUFBQSxTQUFTLENBQUNlLE1BQVYsQ0FBaUJSLEdBQWpCO0FBQ0EsU0FBT0EsR0FBUDtBQUNELENBYkQ7O0FBZUEsTUFBTVMsZ0JBQWdCLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEtBQWtCO0FBQ3ZDLFFBQU1DLE1BQU0sR0FBR3BCLFFBQVEsQ0FBQ2tCLEdBQUQsRUFBTUMsT0FBTixFQUFlLElBQWYsQ0FBdkI7QUFDQUMsRUFBQUEsTUFBTSxDQUFDQyxTQUFQLEdBQW1CLFFBQW5CO0FBQ0EsU0FBT0QsTUFBUDtBQUNILENBSkQ7O0FBTUEsTUFBTUUsS0FBSyxHQUFJQyxHQUFELElBQVM7QUFBRSxTQUFPQSxHQUFHLEdBQUcsQ0FBYjtBQUFnQixDQUF6Qzs7QUFHQSxNQUFNQyxNQUFNLEdBQUcsQ0FBQ04sR0FBRCxFQUFNTyxXQUFOLEVBQW1CQyxRQUFuQixLQUFnQztBQUU3QyxRQUFNQyxHQUFHLEdBQUdsQixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBWjtBQUNBaUIsRUFBQUEsR0FBRyxDQUFDWCxNQUFKLENBQVdDLGdCQUFnQixDQUFDQyxHQUFELEVBQU1PLFdBQVcsQ0FBQ04sT0FBWixDQUFvQixDQUFwQixDQUFOLENBQTNCO0FBRUEsTUFBSVMsS0FBSyxHQUFHLENBQVo7O0FBQ0F0QixZQUFFdUIsT0FBRixDQUFVSCxRQUFWLEVBQXFCSSxPQUFELElBQWE7QUFDL0IsVUFBTXRCLEdBQUcsR0FBR1IsUUFBUSxDQUFDa0IsR0FBRCxFQUFNWSxPQUFOLEVBQWUsSUFBZixDQUFwQjtBQUNBdEIsSUFBQUEsR0FBRyxDQUFDYSxTQUFKLEdBQWlCQyxLQUFLLENBQUNNLEtBQUQsQ0FBTixHQUFpQixLQUFqQixHQUF5QixNQUF6QztBQUNBRCxJQUFBQSxHQUFHLENBQUNYLE1BQUosQ0FBV1IsR0FBWDtBQUNBb0IsSUFBQUEsS0FBSyxJQUFJLENBQVQ7QUFDRCxHQUxEOztBQU9BVixFQUFBQSxHQUFHLENBQUNGLE1BQUosQ0FBV1csR0FBWDtBQUVBLFNBQU9ULEdBQVA7QUFDRCxDQWhCRDtBQWlCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF8gfSBmcm9tICdsb2Rhc2gnO1xuXG5cbmNvbnN0IHN1bSA9IChhLCBiKSA9PiBhICsgYjtcbi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBidWlsZFJvdyA9IChwYXJlbnRPYmosIG9uZVJvd09iamVjdHMsIHRhZykgPT4ge1xuICBjb25zb2xlLmxvZyh0eXBlb2YocGFyZW50T2JqKSwgcGFyZW50T2JqKTtcbiAgY29uc29sZS5sb2codHlwZW9mKG9uZVJvd09iamVjdHMpLCBvbmVSb3dPYmplY3RzLCBfLmhlYWQob25lUm93T2JqZWN0cykpO1xuICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICBfLnJlZHVjZShvbmVSb3dPYmplY3RzLCAoYWNjLCBlbCkgPT4ge1xuICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgY29uc29sZS5sb2coZWwpO1xuICAgIGNlbGwudGV4dENvbnRlbnQgPSBlbDtcbiAgICBhY2MuYXBwZW5kKGNlbGwpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHJvdyk7XG4gIHBhcmVudE9iai5hcHBlbmQocm93KTtcbiAgcmV0dXJuIHJvdztcbn07XG5cbmNvbnN0IGJ1aWxkVGFibGVIZWFkZXIgPSAob2JqLCBoZWFkZXJzKSA9PiB7XG4gICAgY29uc3QgaGVhZGVyID0gYnVpbGRSb3cob2JqLCBoZWFkZXJzLCAndGgnKTtcbiAgICBoZWFkZXIuY2xhc3NOYW1lID0gJ2hlYWRlcic7XG4gICAgcmV0dXJuIGhlYWRlcjtcbn07XG5cbmNvbnN0IGlzT2RkID0gKG51bSkgPT4geyByZXR1cm4gbnVtICUgMjt9XG5cblxuY29uc3QgcnVuQXBwID0gKG9iaiwgY29uZmlnVGFibGUsIHRlc3REYXRhKSA9PiB7XG5cbiAgY29uc3QgdGJsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgdGJsLmFwcGVuZChidWlsZFRhYmxlSGVhZGVyKG9iaiwgY29uZmlnVGFibGUuaGVhZGVyc1swXSkpO1xuXG4gIGxldCBpbmRleCA9IDA7XG4gIF8uZm9yRWFjaCh0ZXN0RGF0YSwgKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCByb3cgPSBidWlsZFJvdyhvYmosIGVsZW1lbnQsICd0ZCcpO1xuICAgIHJvdy5jbGFzc05hbWUgPSAoaXNPZGQoaW5kZXgpKSA/ICdvZGQnIDogJ2V2ZW4nO1xuICAgIHRibC5hcHBlbmQocm93KTtcbiAgICBpbmRleCArPSAxO1xuICB9KTtcblxuICBvYmouYXBwZW5kKHRibCk7XG5cbiAgcmV0dXJuIG9iajtcbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5leHBvcnQgeyBzdW0sIHJ1bkFwcCB9O1xuIl19