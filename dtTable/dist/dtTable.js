"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runApp = exports.sum = void 0;

var _lodash = require("lodash");

//  fixme: add pagination, search, count rows
//  todo посмотри что можно сделать с валидацией номера телефона напримера
//  - т.е. получать инфу по кодификатору например.
const sum = (a, b) => a + b;
/* eslint-disable */


exports.sum = sum;
let stackStore = {
  "version": "1.0.0"
};
stackStore.currentPageNumber = 1;
stackStore.pageRowsLimit = 10;

const buildRow = (parentObj, oneRowObjects, tag) => {
  const row = document.createElement('tr');

  _lodash._.reduce(oneRowObjects, (acc, el) => {
    const cell = document.createElement(tag); //console.log(el);

    cell.textContent = el;
    acc.append(cell);
    return acc;
  }, row);

  parentObj.append(row);
  return row;
};

const buildTableHeader = (obj, headers) => {
  const header = buildRow(obj, headers, 'th');
  header.className = 'header';
  return header;
};

const isOdd = num => {
  return num % 2;
};

const addRemoveRowCell = obj => {
  let colRemove = document.createElement('td');
  colRemove.className = 'removeRowBtn';
  let buttonRemove = document.createElement('i');
  buttonRemove.className = "fa fa-remove";
  colRemove.append(buttonRemove);
  obj.append(colRemove);
  return obj;
};

const addRemoveRowHeaderCell = obj => {
  let colRemove = document.createElement('th');
  let buttonRemove = document.createElement('i');
  buttonRemove.className = "fa fa-remove";
  colRemove.append(buttonRemove);
  obj.append(colRemove);
  return obj;
};

const hasRemoveRowColumn = obj => obj.columnDeleteRow;

const selectHandler = e => {
  console.log('event.currentTarget =>', e.currentTarget);
};

const removeHandler = e => {
  //console.log('=> ',e.target.parentElement, '=>> ', e.target.parentNode.parentNode);
  e.currentTarget.parentNode.parentNode.removeChild(e.currentTarget.parentNode); // fixme: add stack for store removed mail-lists
  // fixme: add stack for store final list of rows ( and check it befor send)
  // fixme: add this two stascks to configTable - for store data

  stackStore.count = stackStore.count + 1;
  console.log('stackStore => ', stackStore);
};

const renderDtTable = (obj, configTable, tableData) => {
  obj.removeChild(obj);
  const tbl = document.createElement('table');
  tbl.className = 'dtTable';
  const header = buildTableHeader(obj, configTable.headers[0]);

  if (hasRemoveRowColumn(configTable)) {
    addRemoveRowHeaderCell(header);
  }

  tbl.append(header);
  let index = 0;

  _lodash._.forEach(tableData, element => {
    const row = buildRow(obj, element, 'td');

    if (hasRemoveRowColumn(configTable)) {
      addRemoveRowCell(row);
    }

    tbl.append(row);
    index += 1;
  });

  obj.append(tbl);
  const rows = document.querySelectorAll('table.dtTable tr');

  _lodash._.forEach(rows, element => {
    element.addEventListener('click', selectHandler);
  });

  const removeRowButtons = document.querySelectorAll('td.removeRowBtn');

  _lodash._.forEach(removeRowButtons, button => {
    button.addEventListener('click', removeHandler);
  });

  return obj;
};
/**
 * application
 * @param obj
 * @param configTable
 * @param testData
 * @returns {*}
 */


const runApp = (obj, configTable, tableData) => {
  /**
   * !!!
   */
  stackStore.inputData = tableData; // fixme - clone or copy obj!!!!  - todo

  if (tableData.rowLimit) {
    stackStore.pageRowsLimit = tableData.rowLimit;
  }

  renderDtTable(obj, configTable, tableData);
  return renderDtTable(obj, configTable, tableData);
};
/* eslint-enable */


exports.runApp = runApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kdFRhYmxlLmpzIl0sIm5hbWVzIjpbInN1bSIsImEiLCJiIiwic3RhY2tTdG9yZSIsImN1cnJlbnRQYWdlTnVtYmVyIiwicGFnZVJvd3NMaW1pdCIsImJ1aWxkUm93IiwicGFyZW50T2JqIiwib25lUm93T2JqZWN0cyIsInRhZyIsInJvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIl8iLCJyZWR1Y2UiLCJhY2MiLCJlbCIsImNlbGwiLCJ0ZXh0Q29udGVudCIsImFwcGVuZCIsImJ1aWxkVGFibGVIZWFkZXIiLCJvYmoiLCJoZWFkZXJzIiwiaGVhZGVyIiwiY2xhc3NOYW1lIiwiaXNPZGQiLCJudW0iLCJhZGRSZW1vdmVSb3dDZWxsIiwiY29sUmVtb3ZlIiwiYnV0dG9uUmVtb3ZlIiwiYWRkUmVtb3ZlUm93SGVhZGVyQ2VsbCIsImhhc1JlbW92ZVJvd0NvbHVtbiIsImNvbHVtbkRlbGV0ZVJvdyIsInNlbGVjdEhhbmRsZXIiLCJlIiwiY29uc29sZSIsImxvZyIsImN1cnJlbnRUYXJnZXQiLCJyZW1vdmVIYW5kbGVyIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiY291bnQiLCJyZW5kZXJEdFRhYmxlIiwiY29uZmlnVGFibGUiLCJ0YWJsZURhdGEiLCJ0YmwiLCJpbmRleCIsImZvckVhY2giLCJlbGVtZW50Iiwicm93cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlUm93QnV0dG9ucyIsImJ1dHRvbiIsInJ1bkFwcCIsImlucHV0RGF0YSIsInJvd0xpbWl0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBR0E7QUFDQTtBQUNBO0FBRUEsTUFBTUEsR0FBRyxHQUFHLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLEdBQUdDLENBQTFCO0FBQ0E7Ozs7QUFDQSxJQUFJQyxVQUFVLEdBQUc7QUFBQyxhQUFXO0FBQVosQ0FBakI7QUFDQUEsVUFBVSxDQUFDQyxpQkFBWCxHQUErQixD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QUFhO0FBQzNCQSxJQUFBQSxPQUFPLENBQUNHLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDbEIsYUFBbEM7QUFDRCxHQUZEOztBQUlBLFFBQU1tQixnQkFBZ0IsR0FBR3pDLFFBQVEsQ0FBQ3VDLGdCQUFULENBQTBCLGlCQUExQixDQUF6Qjs7QUFDQXJDLFlBQUVrQyxPQUFGLENBQVVLLGdCQUFWLEVBQTZCQyxNQUFELElBQVk7QUFDdENBLElBQUFBLE1BQU0sQ0FBQ0YsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUNiLGFBQWpDO0FBQ0QsR0FGRDs7QUFJQSxTQUFPakIsR0FBUDtBQUNELENBbkNEO0FBb0NBOzs7Ozs7Ozs7QUFPQSxNQUFNaUMsTUFBTSxHQUFHLENBQUNqQyxHQUFELEVBQU1zQixXQUFOLEVBQW1CQyxTQUFuQixLQUFpQztBQUU5Qzs7O0FBR0F6QyxFQUFBQSxVQUFVLENBQUNvRCxTQUFYLEdBQXVCWCxTQUF2QixDQUw4QyxDQUtaOztBQUVsQyxNQUFHQSxTQUFTLENBQUNZLFFBQWIsRUFBc0I7QUFDcEJyRCxJQUFBQSxVQUFVLENBQUNFLGFBQVgsR0FBMkJ1QyxTQUFTLENBQUNZLFFBQXJDO0FBQ0Q7O0FBQ0RkLEVBQUFBLGFBQWEsQ0FBQ3JCLEdBQUQsRUFBTXNCLFdBQU4sRUFBbUJDLFNBQW5CLENBQWI7QUFDQSxTQUFPRixhQUFhLENBQUNyQixHQUFELEVBQU1zQixXQUFOLEVBQW1CQyxTQUFuQixDQUFwQjtBQUNELENBWkQ7QUFhQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF8gfSBmcm9tICdsb2Rhc2gnO1xuXG5cbi8vICBmaXhtZTogYWRkIHBhZ2luYXRpb24sIHNlYXJjaCwgY291bnQgcm93c1xuLy8gIHRvZG8g0L/QvtGB0LzQvtGC0YDQuCDRh9GC0L4g0LzQvtC20L3QviDRgdC00LXQu9Cw0YLRjCDRgSDQstCw0LvQuNC00LDRhtC40LXQuSDQvdC+0LzQtdGA0LAg0YLQtdC70LXRhNC+0L3QsCDQvdCw0L/RgNC40LzQtdGA0LBcbi8vICAtINGCLtC1LiDQv9C+0LvRg9GH0LDRgtGMINC40L3RhNGDINC/0L4g0LrQvtC00LjRhNC40LrQsNGC0L7RgNGDINC90LDQv9GA0LjQvNC10YAuXG5cbmNvbnN0IHN1bSA9IChhLCBiKSA9PiBhICsgYjtcbi8qIGVzbGludC1kaXNhYmxlICovXG5sZXQgc3RhY2tTdG9yZSA9IHtcInZlcnNpb25cIjogXCIxLjAuMFwifTtcbnN0YWNrU3RvcmUuY3VycmVudFBhZ2VOdW1iZXIgPSAxO1xuc3RhY2tTdG9yZS5wYWdlUm93c0xpbWl0ID0gMTA7XG5cbmNvbnN0IGJ1aWxkUm93ID0gKHBhcmVudE9iaiwgb25lUm93T2JqZWN0cywgdGFnKSA9PiB7XG4gIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gIF8ucmVkdWNlKG9uZVJvd09iamVjdHMsIChhY2MsIGVsKSA9PiB7XG4gICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICAvL2NvbnNvbGUubG9nKGVsKTtcbiAgICBjZWxsLnRleHRDb250ZW50ID0gZWw7XG4gICAgYWNjLmFwcGVuZChjZWxsKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCByb3cpO1xuICBwYXJlbnRPYmouYXBwZW5kKHJvdyk7XG4gIHJldHVybiByb3c7XG59O1xuXG5jb25zdCBidWlsZFRhYmxlSGVhZGVyID0gKG9iaiwgaGVhZGVycykgPT4ge1xuICAgIGNvbnN0IGhlYWRlciA9IGJ1aWxkUm93KG9iaiwgaGVhZGVycywgJ3RoJyk7XG4gICAgaGVhZGVyLmNsYXNzTmFtZSA9ICdoZWFkZXInO1xuICAgIHJldHVybiBoZWFkZXI7XG59O1xuXG5jb25zdCBpc09kZCA9IChudW0pID0+IHsgcmV0dXJuIG51bSAlIDI7fTtcblxuY29uc3QgYWRkUmVtb3ZlUm93Q2VsbCA9IChvYmopID0+IHtcbiAgICBsZXQgY29sUmVtb3ZlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICBjb2xSZW1vdmUuY2xhc3NOYW1lID0gJ3JlbW92ZVJvd0J0bic7XG4gICAgbGV0IGJ1dHRvblJlbW92ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICBidXR0b25SZW1vdmUuY2xhc3NOYW1lPVwiZmEgZmEtcmVtb3ZlXCI7XG4gICAgY29sUmVtb3ZlLmFwcGVuZChidXR0b25SZW1vdmUpO1xuICAgIG9iai5hcHBlbmQoY29sUmVtb3ZlKTtcbiAgICByZXR1cm4gb2JqO1xufTtcblxuY29uc3QgYWRkUmVtb3ZlUm93SGVhZGVyQ2VsbCA9IChvYmopID0+IHtcbiAgbGV0IGNvbFJlbW92ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gIGxldCBidXR0b25SZW1vdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gIGJ1dHRvblJlbW92ZS5jbGFzc05hbWU9XCJmYSBmYS1yZW1vdmVcIjtcbiAgY29sUmVtb3ZlLmFwcGVuZChidXR0b25SZW1vdmUpO1xuICBvYmouYXBwZW5kKGNvbFJlbW92ZSk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5jb25zdCBoYXNSZW1vdmVSb3dDb2x1bW4gPSAob2JqKSA9PiBvYmouY29sdW1uRGVsZXRlUm93O1xuXG5jb25zdCBzZWxlY3RIYW5kbGVyID0gKGUpID0+IHtcbiAgY29uc29sZS5sb2coJ2V2ZW50LmN1cnJlbnRUYXJnZXQgPT4nLCBlLmN1cnJlbnRUYXJnZXQpO1xufTtcblxuY29uc3QgcmVtb3ZlSGFuZGxlciA9IChlKSA9PiB7XG5cbiAgLy9jb25zb2xlLmxvZygnPT4gJyxlLnRhcmdldC5wYXJlbnRFbGVtZW50LCAnPT4+ICcsIGUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZSk7XG4gIGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUpO1xuICAvLyBmaXhtZTogYWRkIHN0YWNrIGZvciBzdG9yZSByZW1vdmVkIG1haWwtbGlzdHNcbiAgLy8gZml4bWU6IGFkZCBzdGFjayBmb3Igc3RvcmUgZmluYWwgbGlzdCBvZiByb3dzICggYW5kIGNoZWNrIGl0IGJlZm9yIHNlbmQpXG4gIC8vIGZpeG1lOiBhZGQgdGhpcyB0d28gc3Rhc2NrcyB0byBjb25maWdUYWJsZSAtIGZvciBzdG9yZSBkYXRhXG5cbiAgc3RhY2tTdG9yZS5jb3VudCA9IHN0YWNrU3RvcmUuY291bnQgKyAxO1xuICBjb25zb2xlLmxvZygnc3RhY2tTdG9yZSA9PiAnLCBzdGFja1N0b3JlKTtcblxufTtcblxuY29uc3QgcmVuZGVyRHRUYWJsZSA9IChvYmosIGNvbmZpZ1RhYmxlLCB0YWJsZURhdGEpID0+IHtcbiAgb2JqLnJlbW92ZUNoaWxkKG9iaik7XG4gIGNvbnN0IHRibCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG5cbiAgdGJsLmNsYXNzTmFtZSA9ICdkdFRhYmxlJztcbiAgY29uc3QgaGVhZGVyID0gYnVpbGRUYWJsZUhlYWRlcihvYmosIGNvbmZpZ1RhYmxlLmhlYWRlcnNbMF0pO1xuICBpZihoYXNSZW1vdmVSb3dDb2x1bW4oY29uZmlnVGFibGUpKXtcbiAgICBhZGRSZW1vdmVSb3dIZWFkZXJDZWxsKGhlYWRlcik7XG4gIH1cblxuICB0YmwuYXBwZW5kKGhlYWRlcik7XG5cblxuICBsZXQgaW5kZXggPSAwO1xuICBfLmZvckVhY2godGFibGVEYXRhLCAoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHJvdyA9IGJ1aWxkUm93KG9iaiwgZWxlbWVudCwgJ3RkJyk7XG4gICAgaWYoaGFzUmVtb3ZlUm93Q29sdW1uKGNvbmZpZ1RhYmxlKSl7XG4gICAgICBhZGRSZW1vdmVSb3dDZWxsKHJvdyk7XG4gICAgfVxuICAgIHRibC5hcHBlbmQocm93KTtcbiAgICBpbmRleCArPSAxO1xuICB9KTtcbiAgb2JqLmFwcGVuZCh0YmwpO1xuXG4gIGNvbnN0IHJvd3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0YWJsZS5kdFRhYmxlIHRyJyk7XG4gIF8uZm9yRWFjaChyb3dzLCAoZWxlbWVudCkgPT4ge1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzZWxlY3RIYW5kbGVyKTtcbiAgfSk7XG5cbiAgY29uc3QgcmVtb3ZlUm93QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkLnJlbW92ZVJvd0J0bicpO1xuICBfLmZvckVhY2gocmVtb3ZlUm93QnV0dG9ucywgKGJ1dHRvbikgPT4ge1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlbW92ZUhhbmRsZXIpO1xuICB9KTtcblxuICByZXR1cm4gb2JqO1xufTtcbi8qKlxuICogYXBwbGljYXRpb25cbiAqIEBwYXJhbSBvYmpcbiAqIEBwYXJhbSBjb25maWdUYWJsZVxuICogQHBhcmFtIHRlc3REYXRhXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuY29uc3QgcnVuQXBwID0gKG9iaiwgY29uZmlnVGFibGUsIHRhYmxlRGF0YSkgPT4ge1xuXG4gIC8qKlxuICAgKiAhISFcbiAgICovXG4gIHN0YWNrU3RvcmUuaW5wdXREYXRhID0gdGFibGVEYXRhOyAvLyBmaXhtZSAtIGNsb25lIG9yIGNvcHkgb2JqISEhISAgLSB0b2RvXG5cbiAgaWYodGFibGVEYXRhLnJvd0xpbWl0KXtcbiAgICBzdGFja1N0b3JlLnBhZ2VSb3dzTGltaXQgPSB0YWJsZURhdGEucm93TGltaXQ7XG4gIH1cbiAgcmVuZGVyRHRUYWJsZShvYmosIGNvbmZpZ1RhYmxlLCB0YWJsZURhdGEpO1xuICByZXR1cm4gcmVuZGVyRHRUYWJsZShvYmosIGNvbmZpZ1RhYmxlLCB0YWJsZURhdGEpO1xufTtcbi8qIGVzbGludC1lbmFibGUgKi9cbmV4cG9ydCB7IHN1bSwgcnVuQXBwIH07XG4iXX0=