"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = require("lodash");

// todo validation function //html5 + html4 && IE 10/11 support;
// todo
const sendRequest = url => {
  /* eslint-disable */
  const xhttp = new XMLHttpRequest();
  const req = new Promise((resolve, reject) => {
    xhttp.onreadystatechange = function () {
      if (this.readyState === 4 && this.status === 200) {
        // eslint-disable-line
        const result = xhttp.responseText;
        resolve(JSON.parse(result));
      } else if (this.readyState === 4 && this.status !== 200) {
        reject(new Error(`Error! ${this.readyState} ${this.status}`));
      }
    };

    xhttp.open('POST', url, true);
    xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    xhttp.send('mobile_codes=get');
  });
  return req;
  /* eslint-enable */
};

const renderLabel = obj => {
  const labelInput = document.createElement('label'); // eslint-disable-line

  labelInput.for = obj.getElementsByTagName('input').id;
  labelInput.textContent = ' +';
  obj.append(labelInput);
  return obj;
};

const mobileFormat = arr => {
  const str = (0, _lodash.reduce)(arr, (acc, item, key) => {
    let res = acc;

    if (key === 2 || key === 5) {
      res += item;
      res += '-';
      return res;
    }

    res += item;
    return res;
  }, '');
  return str;
};

const renderDropDownList = (obj, SortedFlags, inputMobileDefault, inputCountryCodeDefault, hiddenInputName) => {
  const dropDownHeader = document.createElement('span'); // eslint-disable-line

  const dropDownInput = document.createElement('input'); // eslint-disable-line

  const dropDownList = document.createElement('div'); // eslint-disable-line

  const dropDownHiddenInput = document.createElement('input'); // eslint-disable-line

  dropDownList.className = 'mobile_input--dropdown-list';
  dropDownHeader.className = 'mobile_input--dropdown-header';
  dropDownInput.className = 'mobile_input--dropdown-input';
  dropDownInput.name = 'country_code';
  dropDownInput.readOnly = true;
  dropDownInput.placeholder = 'код';
  dropDownInput.maxLength = 4;
  dropDownInput.value = inputCountryCodeDefault;
  dropDownHiddenInput.type = 'hidden';
  dropDownHiddenInput.name = hiddenInputName || 'mobileInput_Mobile';
  dropDownHeader.append(dropDownInput);
  const ul = document.createElement('ul'); // eslint-disable-line

  ul.className = 'mobile_input--dropdown-ul';
  (0, _lodash.forEach)(SortedFlags, el => {
    const li = document.createElement('li'); // eslint-disable-line

    let imgFlag = document.createElement('span'); // eslint-disable-line

    let liText = document.createElement('span'); // eslint-disable-line

    li.className = 'mobile_input--dropdown-li';
    imgFlag.className = 'mobile_input--dropdown-imgflag';
    liText.className = 'mobile_input--dropdown-litext';
    liText.textContent = el.mobile_code;
    imgFlag.style.backgroundImage = `url(../img/flags/${el.flag_picture_name})`; // imgFlag.style.backgroundImage = `url(img/flags/${el.flag_picture_name})`;

    li.appendChild(imgFlag);
    li.appendChild(liText);
    li.title = el.name_cyr;
    li.addEventListener('click', () => {
      dropDownInput.value = liText.textContent;
      dropDownList.style.display = 'none';
    });
    ul.append(li);
  });
  dropDownList.append(ul);
  const mobileInput = document.createElement('input'); // eslint-disable-line

  mobileInput.className = 'mobile_input--mobile-input';
  mobileInput.pattern = '\\d{3}(\\s|-)\\d{3}(\\s|-)\\d{4}';
  mobileInput.placeholder = 'XXX-XXX-XXXX';
  mobileInput.title = 'номер мобильного телефона';
  mobileInput.type = 'tel';
  mobileInput.required = true;
  mobileInput.value = mobileFormat(inputMobileDefault);
  mobileInput.name = 'mobile_number';
  mobileInput.autocomplete = 'off';
  obj.append(dropDownHeader);
  obj.append(mobileInput);
  obj.append(dropDownList);
  dropDownHiddenInput.value = mobileFormat(inputMobileDefault);
  obj.append(dropDownHiddenInput);

  const HiddenInputHandler = function () {
    dropDownHiddenInput.value = dropDownInput.value + mobileInput.value;
    return dropDownHiddenInput.value;
  };

  const keybuf = inputMobileDefault.split('');
  console.warn('inputMobileDefault.split: ', keybuf); // fixme: доработать буфер - надо считывать значение !!!!
  // по умолчанию в буфер + обработка нажатий стрелок

  mobileInput.addEventListener('change', e => {
    console.log(e.key);
  });
  mobileInput.addEventListener('keydown', e => {
    if (isNaN(parseInt(e.key, 10)) && e.key !== 'Backspace' && e.key !== 'Enter') {
      // eslint-disable-line
      e.preventDefault();
      return;
    }

    if (keybuf.length >= 10 && e.key !== 'Backspace') {
      e.preventDefault();
      return;
    }

    if (e.key === 'Backspace') {
      e.preventDefault();
      mobileInput.value = '';
      keybuf.pop();
      mobileInput.value = mobileFormat(keybuf);
      HiddenInputHandler();
      return;
    }

    e.preventDefault();
    mobileInput.value = '';
    keybuf.push(e.key);
    mobileInput.value = mobileFormat(keybuf);
    HiddenInputHandler();
  });
  dropDownList.addEventListener('mouseleave', () => {
    dropDownList.style.display = 'none';
    HiddenInputHandler();
  });
  dropDownInput.addEventListener('click', () => {
    dropDownList.style.display = dropDownList.style.display === 'block' ? 'none' : 'block';
    HiddenInputHandler();
  });
  mobileInput.addEventListener('focusin', () => {
    dropDownList.style.display = 'none';
    HiddenInputHandler();
  });
  return obj;
};

const upUsedCountry = (codes, countries) => {
  const upList = codes.filter(el => countries.includes(el.name_lat));
  const result = upList.concat(codes);
  return result;
};

const formatCodes = arr => {
  const sortArr = (0, _lodash.sortBy)(arr.mobile_codes, [o => o.name_cyr]);
  return upUsedCountry(sortArr, ['Russia', 'Belarus', 'Finland', 'Kazakhstan', 'Kyrgyzstan', 'Azerbaijan', 'Armenia', 'Moldova', 'Tajikistan', 'Uzbekistan']);
};

const renderMobileInput = config => {
  sendRequest(config.url).then(MobileCodes => {
    const SortedMobileCodes = formatCodes(MobileCodes);
    renderLabel(config.domObject);
    renderDropDownList(config.domObject, SortedMobileCodes, config.defaultMobile, config.defaultCountryCode, config.hiddenInputName);
  }).catch(error => console.log(error));
  return 0;
};

var _default = renderMobileInput;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2JpbGVJbnB1dENvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJzZW5kUmVxdWVzdCIsInVybCIsInhodHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXN1bHQiLCJyZXNwb25zZVRleHQiLCJKU09OIiwicGFyc2UiLCJFcnJvciIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInJlbmRlckxhYmVsIiwib2JqIiwibGFiZWxJbnB1dCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImZvciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaWQiLCJ0ZXh0Q29udGVudCIsImFwcGVuZCIsIm1vYmlsZUZvcm1hdCIsImFyciIsInN0ciIsImFjYyIsIml0ZW0iLCJrZXkiLCJyZXMiLCJyZW5kZXJEcm9wRG93bkxpc3QiLCJTb3J0ZWRGbGFncyIsImlucHV0TW9iaWxlRGVmYXVsdCIsImlucHV0Q291bnRyeUNvZGVEZWZhdWx0IiwiaGlkZGVuSW5wdXROYW1lIiwiZHJvcERvd25IZWFkZXIiLCJkcm9wRG93bklucHV0IiwiZHJvcERvd25MaXN0IiwiZHJvcERvd25IaWRkZW5JbnB1dCIsImNsYXNzTmFtZSIsIm5hbWUiLCJyZWFkT25seSIsInBsYWNlaG9sZGVyIiwibWF4TGVuZ3RoIiwidmFsdWUiLCJ0eXBlIiwidWwiLCJlbCIsImxpIiwiaW1nRmxhZyIsImxpVGV4dCIsIm1vYmlsZV9jb2RlIiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJmbGFnX3BpY3R1cmVfbmFtZSIsImFwcGVuZENoaWxkIiwidGl0bGUiLCJuYW1lX2N5ciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkaXNwbGF5IiwibW9iaWxlSW5wdXQiLCJwYXR0ZXJuIiwicmVxdWlyZWQiLCJhdXRvY29tcGxldGUiLCJIaWRkZW5JbnB1dEhhbmRsZXIiLCJrZXlidWYiLCJzcGxpdCIsImNvbnNvbGUiLCJ3YXJuIiwiZSIsImxvZyIsImlzTmFOIiwicGFyc2VJbnQiLCJwcmV2ZW50RGVmYXVsdCIsImxlbmd0aCIsInBvcCIsInB1c2giLCJ1cFVzZWRDb3VudHJ5IiwiY29kZXMiLCJjb3VudHJpZXMiLCJ1cExpc3QiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsIm5hbWVfbGF0IiwiY29uY2F0IiwiZm9ybWF0Q29kZXMiLCJzb3J0QXJyIiwibW9iaWxlX2NvZGVzIiwibyIsInJlbmRlck1vYmlsZUlucHV0IiwiY29uZmlnIiwidGhlbiIsIk1vYmlsZUNvZGVzIiwiU29ydGVkTW9iaWxlQ29kZXMiLCJkb21PYmplY3QiLCJkZWZhdWx0TW9iaWxlIiwiZGVmYXVsdENvdW50cnlDb2RlIiwiY2F0Y2giLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUlBO0FBQ0E7QUFDQSxNQUFNQSxXQUFXLEdBQUlDLEdBQUQsSUFBUztBQUMzQjtBQUNBLFFBQU1DLEtBQUssR0FBRyxJQUFJQyxjQUFKLEVBQWQ7QUFFQSxRQUFNQyxHQUFHLEdBQUcsSUFBSUMsT0FBSixDQUFhLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUM1Q0wsSUFBQUEsS0FBSyxDQUFDTSxrQkFBTixHQUEyQixZQUFZO0FBQ3JDLFVBQUksS0FBS0MsVUFBTCxLQUFvQixDQUFwQixJQUF5QixLQUFLQyxNQUFMLEtBQWdCLEdBQTdDLEVBQWtEO0FBQUU7QUFDbEQsY0FBTUMsTUFBTSxHQUFHVCxLQUFLLENBQUNVLFlBQXJCO0FBQ0FOLFFBQUFBLE9BQU8sQ0FBQ08sSUFBSSxDQUFDQyxLQUFMLENBQVdILE1BQVgsQ0FBRCxDQUFQO0FBQ0QsT0FIRCxNQUdPLElBQUksS0FBS0YsVUFBTCxLQUFvQixDQUFwQixJQUF5QixLQUFLQyxNQUFMLEtBQWdCLEdBQTdDLEVBQWtEO0FBQ3ZESCxRQUFBQSxNQUFNLENBQUMsSUFBSVEsS0FBSixDQUFXLFVBQVMsS0FBS04sVUFBVyxJQUFH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QUFjTixLQUFkLENBQWY7QUFDQSxTQUFPekUsTUFBUDtBQUNELENBSkQ7O0FBTUEsTUFBTWdGLFdBQVcsR0FBSTdELEdBQUQsSUFBUztBQUMzQixRQUFNOEQsT0FBTyxHQUFHLG9CQUFPOUQsR0FBRyxDQUFDK0QsWUFBWCxFQUF5QixDQUFFQyxDQUFELElBQU9BLENBQUMsQ0FBQy9CLFFBQVYsQ0FBekIsQ0FBaEI7QUFDQSxTQUFPb0IsYUFBYSxDQUFDUyxPQUFELEVBQVUsQ0FBQyxRQUFELEVBQVcsU0FBWCxFQUFzQixTQUF0QixFQUFpQyxZQUFqQyxFQUErQyxZQUEvQyxFQUE2RCxZQUE3RCxFQUEyRSxTQUEzRSxFQUFzRixTQUF0RixFQUFpRyxZQUFqRyxFQUErRyxZQUEvRyxDQUFWLENBQXBCO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNRyxpQkFBaUIsR0FBSUMsTUFBRCxJQUFZO0FBQ3BDaEcsRUFBQUEsV0FBVyxDQUFDZ0csTUFBTSxDQUFDL0YsR0FBUixDQUFYLENBQ0dnRyxJQURILENBQ1NDLFdBQUQsSUFBaUI7QUFDckIsVUFBTUMsaUJBQWlCLEdBQUdSLFdBQVcsQ0FBQ08sV0FBRCxDQUFyQztBQUNBL0UsSUFBQUEsV0FBVyxDQUFDNkUsTUFBTSxDQUFDSSxTQUFSLENBQVg7QUFDQWhFLElBQUFBLGtCQUFrQixDQUFDNEQsTUFBTSxDQUFDSSxTQUFSLEVBQ2hCRCxpQkFEZ0IsRUFDR0gsTUFBTSxDQUFDSyxhQURWLEVBQ3lCTCxNQUFNLENBQUNNLGtCQURoQyxFQUNvRE4sTUFBTSxDQUFDeEQsZUFEM0QsQ0FBbEI7QUFFRCxHQU5ILEVBT0crRCxLQVBILENBT1VDLEtBQUQsSUFBVy9CLE9BQU8sQ0FBQ0csR0FBUixDQUFZNEIsS0FBWixDQVBwQjtBQVFBLFNBQU8sQ0FBUDtBQUNELENBVkQ7O2VBWWVULGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZm9yRWFjaCwgc29ydEJ5LCByZWR1Y2UsXG59IGZyb20gJ2xvZGFzaCc7XG5cbi8vIHRvZG8gdmFsaWRhdGlvbiBmdW5jdGlvbiAvL2h0bWw1ICsgaHRtbDQgJiYgSUUgMTAvMTEgc3VwcG9ydDtcbi8vIHRvZG9cbmNvbnN0IHNlbmRSZXF1ZXN0ID0gKHVybCkgPT4ge1xuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICBjb25zdCB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gIGNvbnN0IHJlcSA9IG5ldyBQcm9taXNlKCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgeGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCAmJiB0aGlzLnN0YXR1cyA9PT0gMjAwKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgY29uc3QgcmVzdWx0ID0geGh0dHAucmVzcG9uc2VUZXh0O1xuICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UocmVzdWx0KSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCAmJiB0aGlzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYEVycm9yISAke3RoaXMucmVhZHlTdGF0ZX0gJHt0aGlzLnN0YXR1c31gKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB4aHR0cC5vcGVuKCdQT1NUJywgdXJsLCB0cnVlKTtcbiAgICB4aHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG4gICAgeGh0dHAuc2VuZCgnbW9iaWxlX2NvZGVzPWdldCcpO1xuICB9KSk7XG4gIHJldHVybiByZXE7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cbn07XG5cbmNvbnN0IHJlbmRlckxhYmVsID0gKG9iaikgPT4ge1xuICBjb25zdCBsYWJlbElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsYWJlbElucHV0LmZvciA9IG9iai5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKS5pZDtcbiAgbGFiZWxJbnB1dC50ZXh0Q29udGVudCA9ICcgKyc7XG4gIG9iai5hcHBlbmQobGFiZWxJbnB1dCk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5jb25zdCBtb2JpbGVGb3JtYXQgPSAoYXJyKSA9PiB7XG4gIGNvbnN0IHN0ciA9IHJlZHVjZShhcnIsIChhY2MsIGl0ZW0sIGtleSkgPT4ge1xuICAgIGxldCByZXMgPSBhY2M7XG4gICAgaWYgKGtleSA9PT0gMiB8fCBrZXkgPT09IDUpIHtcbiAgICAgIHJlcyArPSBpdGVtO1xuICAgICAgcmVzICs9ICctJztcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIHJlcyArPSBpdGVtO1xuICAgIHJldHVybiByZXM7XG4gIH0sICcnKTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbmNvbnN0IHJlbmRlckRyb3BEb3duTGlzdCA9IChvYmosXG4gIFNvcnRlZEZsYWdzLFxuICBpbnB1dE1vYmlsZURlZmF1bHQsXG4gIGlucHV0Q291bnRyeUNvZGVEZWZhdWx0LFxuICBoaWRkZW5JbnB1dE5hbWUpID0+IHtcbiAgY29uc3QgZHJvcERvd25IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgY29uc3QgZHJvcERvd25JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgY29uc3QgZHJvcERvd25MaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgY29uc3QgZHJvcERvd25IaWRkZW5JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBkcm9wRG93bkxpc3QuY2xhc3NOYW1lID0gJ21vYmlsZV9pbnB1dC0tZHJvcGRvd24tbGlzdCc7XG4gIGRyb3BEb3duSGVhZGVyLmNsYXNzTmFtZSA9ICdtb2JpbGVfaW5wdXQtLWRyb3Bkb3duLWhlYWRlcic7XG4gIGRyb3BEb3duSW5wdXQuY2xhc3NOYW1lID0gJ21vYmlsZV9pbnB1dC0tZHJvcGRvd24taW5wdXQnO1xuICBkcm9wRG93bklucHV0Lm5hbWUgPSAnY291bnRyeV9jb2RlJztcbiAgZHJvcERvd25JbnB1dC5yZWFkT25seSA9IHRydWU7XG4gIGRyb3BEb3duSW5wdXQucGxhY2Vob2xkZXIgPSAn0LrQvtC0JztcbiAgZHJvcERvd25JbnB1dC5tYXhMZW5ndGggPSA0O1xuICBkcm9wRG93bklucHV0LnZhbHVlID0gaW5wdXRDb3VudHJ5Q29kZURlZmF1bHQ7XG5cbiAgZHJvcERvd25IaWRkZW5JbnB1dC50eXBlID0gJ2hpZGRlbic7XG4gIGRyb3BEb3duSGlkZGVuSW5wdXQubmFtZSA9IGhpZGRlbklucHV0TmFtZSB8fCAnbW9iaWxlSW5wdXRfTW9iaWxlJztcblxuICBkcm9wRG93bkhlYWRlci5hcHBlbmQoZHJvcERvd25JbnB1dCk7XG5cbiAgY29uc3QgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHVsLmNsYXNzTmFtZSA9ICdtb2JpbGVfaW5wdXQtLWRyb3Bkb3duLXVsJztcblxuICBmb3JFYWNoKFNvcnRlZEZsYWdzLCAoZWwpID0+IHtcbiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBsZXQgaW1nRmxhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGxldCBsaVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBsaS5jbGFzc05hbWUgPSAnbW9iaWxlX2lucHV0LS1kcm9wZG93bi1saSc7XG4gICAgaW1nRmxhZy5jbGFzc05hbWUgPSAnbW9iaWxlX2lucHV0LS1kcm9wZG93bi1pbWdmbGFnJztcbiAgICBsaVRleHQuY2xhc3NOYW1lID0gJ21vYmlsZV9pbnB1dC0tZHJvcGRvd24tbGl0ZXh0JztcblxuICAgIGxpVGV4dC50ZXh0Q29udGVudCA9IGVsLm1vYmlsZV9jb2RlO1xuXG4gICAgaW1nRmxhZy5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgdXJsKC4uL2ltZy9mbGFncy8ke2VsLmZsYWdfcGljdHVyZV9uYW1lfSlgO1xuICAgIC8vIGltZ0ZsYWcuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybChpbWcvZmxhZ3MvJHtlbC5mbGFnX3BpY3R1cmVfbmFtZX0pYDtcblxuICAgIGxpLmFwcGVuZENoaWxkKGltZ0ZsYWcpO1xuICAgIGxpLmFwcGVuZENoaWxkKGxpVGV4dCk7XG5cbiAgICBsaS50aXRsZSA9IGVsLm5hbWVfY3lyO1xuICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgZHJvcERvd25JbnB1dC52YWx1ZSA9IGxpVGV4dC50ZXh0Q29udGVudDtcbiAgICAgIGRyb3BEb3duTGlzdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0pO1xuICAgIHVsLmFwcGVuZChsaSk7XG4gIH0pO1xuXG4gIGRyb3BEb3duTGlzdC5hcHBlbmQodWwpO1xuXG4gIGNvbnN0IG1vYmlsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBtb2JpbGVJbnB1dC5jbGFzc05hbWUgPSAnbW9iaWxlX2lucHV0LS1tb2JpbGUtaW5wdXQnO1xuICBtb2JpbGVJbnB1dC5wYXR0ZXJuID0gJ1xcXFxkezN9KFxcXFxzfC0pXFxcXGR7M30oXFxcXHN8LSlcXFxcZHs0fSc7XG4gIG1vYmlsZUlucHV0LnBsYWNlaG9sZGVyID0gJ1hYWC1YWFgtWFhYWCc7XG4gIG1vYmlsZUlucHV0LnRpdGxlID0gJ9C90L7QvNC10YAg0LzQvtCx0LjQu9GM0L3QvtCz0L4g0YLQtdC70LXRhNC+0L3QsCc7XG4gIG1vYmlsZUlucHV0LnR5cGUgPSAndGVsJztcbiAgbW9iaWxlSW5wdXQucmVxdWlyZWQgPSB0cnVlO1xuICBtb2JpbGVJbnB1dC52YWx1ZSA9IG1vYmlsZUZvcm1hdChpbnB1dE1vYmlsZURlZmF1bHQpO1xuICBtb2JpbGVJbnB1dC5uYW1lID0gJ21vYmlsZV9udW1iZXInO1xuICBtb2JpbGVJbnB1dC5hdXRvY29tcGxldGUgPSAnb2ZmJztcblxuICBvYmouYXBwZW5kKGRyb3BEb3duSGVhZGVyKTtcblxuICBvYmouYXBwZW5kKG1vYmlsZUlucHV0KTtcblxuICBvYmouYXBwZW5kKGRyb3BEb3duTGlzdCk7XG5cbiAgZHJvcERvd25IaWRkZW5JbnB1dC52YWx1ZSA9IG1vYmlsZUZvcm1hdChpbnB1dE1vYmlsZURlZmF1bHQpO1xuXG4gIG9iai5hcHBlbmQoZHJvcERvd25IaWRkZW5JbnB1dCk7XG5cbiAgY29uc3QgSGlkZGVuSW5wdXRIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGRyb3BEb3duSGlkZGVuSW5wdXQudmFsdWUgPSBkcm9wRG93bklucHV0LnZhbHVlICsgbW9iaWxlSW5wdXQudmFsdWU7XG4gICAgcmV0dXJuIGRyb3BEb3duSGlkZGVuSW5wdXQudmFsdWU7XG4gIH07XG5cbiAgY29uc3Qga2V5YnVmID0gaW5wdXRNb2JpbGVEZWZhdWx0LnNwbGl0KCcnKTtcbiAgY29uc29sZS53YXJuKCdpbnB1dE1vYmlsZURlZmF1bHQuc3BsaXQ6ICcsIGtleWJ1Zik7XG4gIC8vIGZpeG1lOiDQtNC+0YDQsNCx0L7RgtCw0YLRjCDQsdGD0YTQtdGAIC0g0L3QsNC00L4g0YHRh9C40YLRi9Cy0LDRgtGMINC30L3QsNGH0LXQvdC40LUgISEhIVxuICAvLyDQv9C+INGD0LzQvtC70YfQsNC90LjRjiDQsiDQsdGD0YTQtdGAICsg0L7QsdGA0LDQsdC+0YLQutCwINC90LDQttCw0YLQuNC5INGB0YLRgNC10LvQvtC6XG4gIG1vYmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7IGNvbnNvbGUubG9nKGUua2V5KTsgfSk7XG4gIG1vYmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgIGlmIChpc05hTihwYXJzZUludChlLmtleSwgMTApKSAmJiBlLmtleSAhPT0gJ0JhY2tzcGFjZScgJiYgZS5rZXkgIT09ICdFbnRlcicpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoa2V5YnVmLmxlbmd0aCA+PSAxMCAmJiBlLmtleSAhPT0gJ0JhY2tzcGFjZScpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUua2V5ID09PSAnQmFja3NwYWNlJykge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW9iaWxlSW5wdXQudmFsdWUgPSAnJztcbiAgICAgIGtleWJ1Zi5wb3AoKTtcbiAgICAgIG1vYmlsZUlucHV0LnZhbHVlID0gbW9iaWxlRm9ybWF0KGtleWJ1Zik7XG4gICAgICBIaWRkZW5JbnB1dEhhbmRsZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIG1vYmlsZUlucHV0LnZhbHVlID0gJyc7XG4gICAga2V5YnVmLnB1c2goZS5rZXkpO1xuICAgIG1vYmlsZUlucHV0LnZhbHVlID0gbW9iaWxlRm9ybWF0KGtleWJ1Zik7XG4gICAgSGlkZGVuSW5wdXRIYW5kbGVyKCk7XG4gIH0pO1xuXG4gIGRyb3BEb3duTGlzdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgIGRyb3BEb3duTGlzdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIEhpZGRlbklucHV0SGFuZGxlcigpO1xuICB9KTtcblxuICBkcm9wRG93bklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGRyb3BEb3duTGlzdC5zdHlsZS5kaXNwbGF5ID0gKGRyb3BEb3duTGlzdC5zdHlsZS5kaXNwbGF5ID09PSAnYmxvY2snKSA/ICdub25lJyA6ICdibG9jayc7XG4gICAgSGlkZGVuSW5wdXRIYW5kbGVyKCk7XG4gIH0pO1xuXG4gIG1vYmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCAoKSA9PiB7XG4gICAgZHJvcERvd25MaXN0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgSGlkZGVuSW5wdXRIYW5kbGVyKCk7XG4gIH0pO1xuXG4gIHJldHVybiBvYmo7XG59O1xuXG5jb25zdCB1cFVzZWRDb3VudHJ5ID0gKGNvZGVzLCBjb3VudHJpZXMpID0+IHtcbiAgY29uc3QgdXBMaXN0ID0gY29kZXMuZmlsdGVyKChlbCkgPT4gY291bnRyaWVzLmluY2x1ZGVzKGVsLm5hbWVfbGF0KSk7XG4gIGNvbnN0IHJlc3VsdCA9IHVwTGlzdC5jb25jYXQoY29kZXMpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgZm9ybWF0Q29kZXMgPSAoYXJyKSA9PiB7XG4gIGNvbnN0IHNvcnRBcnIgPSBzb3J0QnkoYXJyLm1vYmlsZV9jb2RlcywgWyhvKSA9PiBvLm5hbWVfY3lyXSk7XG4gIHJldHVybiB1cFVzZWRDb3VudHJ5KHNvcnRBcnIsIFsnUnVzc2lhJywgJ0JlbGFydXMnLCAnRmlubGFuZCcsICdLYXpha2hzdGFuJywgJ0t5cmd5enN0YW4nLCAnQXplcmJhaWphbicsICdBcm1lbmlhJywgJ01vbGRvdmEnLCAnVGFqaWtpc3RhbicsICdVemJla2lzdGFuJ10pO1xufTtcblxuY29uc3QgcmVuZGVyTW9iaWxlSW5wdXQgPSAoY29uZmlnKSA9PiB7XG4gIHNlbmRSZXF1ZXN0KGNvbmZpZy51cmwpXG4gICAgLnRoZW4oKE1vYmlsZUNvZGVzKSA9PiB7XG4gICAgICBjb25zdCBTb3J0ZWRNb2JpbGVDb2RlcyA9IGZvcm1hdENvZGVzKE1vYmlsZUNvZGVzKTtcbiAgICAgIHJlbmRlckxhYmVsKGNvbmZpZy5kb21PYmplY3QpO1xuICAgICAgcmVuZGVyRHJvcERvd25MaXN0KGNvbmZpZy5kb21PYmplY3QsXG4gICAgICAgIFNvcnRlZE1vYmlsZUNvZGVzLCBjb25maWcuZGVmYXVsdE1vYmlsZSwgY29uZmlnLmRlZmF1bHRDb3VudHJ5Q29kZSwgY29uZmlnLmhpZGRlbklucHV0TmFtZSk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xuICByZXR1cm4gMDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlck1vYmlsZUlucHV0O1xuIl19